name: Build

on:
  push:
  workflow_dispatch:
  schedule:
    # run daily at 6am UTC
    - cron: 0 6 * * *

jobs:

  setup:
    name: Setup
    runs-on: self-hosted
    # if the cache download gets stuck for some reason, abort after 5 minutes (default=10 minutes)
    env:
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5
    outputs:
      hit:  ${{ steps.restore-cache.outputs.cache-hit }}
      key: ${{ steps.restore-cache.outputs.cache-primary-key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Restore Cache
        id: restore-cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/unity/Library
          key: Library-${{ hashFiles('unity/Assets/**', 'unity/Packages/**', 'unity/ProjectSettings/**') }}


  build:
    name: Build for ${{ matrix.maroonBuildTarget }}
    runs-on: self-hosted
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        include:
          - targetPlatform: StandaloneWindows64
            maroonBuildTarget: PC

          - targetPlatform: StandaloneWindows64
            maroonBuildTarget: VR

          - targetPlatform: WebGL
            maroonBuildTarget: WebGL
    steps:

      - name: Set GITHUB_WORKSPACE
        shell: bash
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Build
        uses: game-ci/unity-builder@v2
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildMethod: Maroon.Build.BuildPlayer.ActionsBuild
          targetPlatform: ${{ matrix.targetPlatform }}
          projectPath: unity
          allowDirtyBuild: true
          buildsPath: ${{ env.GITHUB_WORKSPACE }}/build
          customParameters: -maroonBuildPath ../build -maroonBuildTarget ${{ matrix.maroonBuildTarget }}
      
      # needed because otherwise game-ci will warn that repo is not clean
      # - name: Restore Build Environment
      #   shell: bash
      #   run: |
      #     cd ${{ github.workspace }} && git reset --hard

  

  save-cache:
    name: Save cache
    runs-on: self-hosted
    needs: [setup, build]
    # only save the cache if we had a cache miss during setup
    if: needs.setup.outputs.hit != 'true'
    steps:
      - name: Save Cache
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/unity/Library
          key: ${{ needs.setup.outputs.key }}


  test:
    name: Run tests
    runs-on: self-hosted
    needs: [setup, build]
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - unity
        testMode:
          - playmode
          - editmode
    steps:
      - name: Test
        uses: game-ci/unity-test-runner@v2
        id: tests
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ./test-results/${{ matrix.testMode }}-results
  

  upload-artifacts:
    name: Upload artifacts
    runs-on: self-hosted
    # we want to upload artifacts even if the tests fail
    # if both build and test fail, we don't want to upload
    needs: [build, test]
    if: ${{ success() || (needs.build.result == 'success' || needs.test.result == 'success') }}
    steps:
      - name: Compress build folder
        run: zip -r build.zip build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: MaroonArtifacts
          path: |
            ${{ github.workspace }}/build.zip
            ${{ github.workspace }}/test-results
          if-no-files-found: error

  deploy: 
    name: Deploy to Steam
    runs-on: self-hosted
    needs: [build, test, upload-artifacts]
    
    # we do not want to deploy if we are doing a scheduled run
    if: ${{ (github.event_name != 'schedule') && (needs.build.result == 'success' || needs.test.result == 'success') }}
    steps:

        # fetch UID of user running the workflow
      - name: Get Actions user id
        id: get_uid
        run: |
          actions_user_id=`id -u $USER`
          echo $actions_user_id
          echo "uid=$actions_user_id" >> $GITHUB_OUTPUT 

        # chown files to the user that was identified in the prev step
      - name: Restore file ownership
        uses: peter-murray/reset-workspace-ownership-action@v1
        with:
          user_id: ${{ steps.get_uid.outputs.uid }}

        # remove the WebGL directory so we do not accidentally publish it to steam
      - name: Prepare deployment
        run: rm -rf build/WebGL

      - name: Deploy
        # use patched version of game-ci/steam-deploy to deploy
        # this can be switched back once is fixed on the upstream
        # see: 
        # https://github.com/game-ci/steam-deploy/issues/56
        uses: mfbrantner/steam-deploy@v0.3
        with:
          username: ${{ secrets.STEAM_USERNAME }}
          configVdf: ${{ secrets.STEAM_CONFIG_VDF}}
          appId: ${{ secrets.STEAM_APP_ID }}
          buildDescription: CI/CD build ${{ github.sha }}
          rootPath: build
          depot1Path: .
          releaseBranch: development


  # this is needed because in some instances, there might be some leftover files
  # in the working directory, that have funky (=root:root) permissions
  # this is not a problem on ephemeral runners, but on self-hosted ones it is
  # thus, we ensure that the working dir is clean before our next pipeline run
  # this step must *ALWAYS* run
  cleanup:
    name: Cleanup
    runs-on: self-hosted
    needs: [test, build, upload-artifacts, save-cache, deploy]
    if: ${{ always() }}
    steps:
      - name: Cleanup
        uses: AutoModality/action-clean@v1
