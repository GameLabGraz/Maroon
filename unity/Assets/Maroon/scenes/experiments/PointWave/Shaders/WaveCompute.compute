// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Nstate;
RWTexture2D<float4> Prevstate;
RWTexture2D<float4> Nextstate;
RWTexture2D<float4> TestState;
RWTexture2D<float4> RightState;
int2 dimensions;
float Resolution;
float3 Clicked;
float phase;
float phase2;
bool Top;
bool Bottom;
bool Left;
bool Right;
[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float x = (id.x / Resolution);
    float y = (id.y / Resolution);
    float ns_ij = Nstate[id.xy].x;
    float nm1_ij = Prevstate[id.xy].x;
    int2 pxy = id.xy;
    int2 mxy = id.xy;
    int2 xpy = id.xy;
    int2 xmy = id.xy;
    pxy.x = pxy.x + 1;
    mxy.x = mxy.x - 1;
    xpy.y = xpy.y + 1;
    xmy.y = xmy.y - 1; // mamybe uint() rewrite 
    float ns_ip1j = Nstate[pxy].x;
    float ns_ijpj = Nstate[xpy].x;
    float ns_im1j = Nstate[mxy].x;
    float ns_ij1j = Nstate[xmy].x;
    float t = ns_ip1j + ns_ijpj + ns_im1j + ns_ij1j - 4 * ns_ij;
    float newWaveHeight = ns_ij * 2 - nm1_ij + 0.25 * t;
    newWaveHeight = newWaveHeight * phase;
    if (id.x == Clicked.x && id.y == Clicked.y)
    {
        newWaveHeight = Clicked.z;
    }
    if (Right)
    {
        if (id.x < 40)
        {
            newWaveHeight = newWaveHeight * (phase2);

            /*if (newWaveHeight <= 0)
            {
                newWaveHeight = newWaveHeight * (0);// or 0 muss see
            }*/
        }
    }
    if (Bottom)
    {
        if (id.y > 70)
        {

            if (newWaveHeight <= 0)
            {
                newWaveHeight = newWaveHeight * (0);
            }
        }
    }
    if (Top)
    {
        if (id.y < 10)
        {

            if (newWaveHeight <= 0)
            {
                newWaveHeight = newWaveHeight * (0);
            }
        }
    }
    if (Left)
    {
        if (id.x > 70)
        {

            if (newWaveHeight <= 0)
            {
                newWaveHeight = newWaveHeight * (0);
            }
        }
    }
    if (newWaveHeight <= 0)
    {
        newWaveHeight = newWaveHeight * (0);
    }
    Nextstate[id.xy] = float4(newWaveHeight, newWaveHeight, newWaveHeight, 1);
















}
